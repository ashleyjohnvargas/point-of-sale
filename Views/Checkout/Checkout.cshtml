@{
    ViewData["Title"] = "Checkout";
	Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="head-title">
	<div class="left">
		<h1> Checkout</h1>	
	</div>
	<div class="right">
		<p id="current-date" style="margin: 0; font-size: 16px; color: #555;"></p>
	</div>
</div>


<div class="checkout-container">
	<div class="table-data">
		<div class="order">
			<div class="head">
				<h3>Shopping Cart</h3>		
				@* <form action="#">
					<div class="form-input">
						<input type="search" placeholder="Search..."> <!--Search for product(name, id) and add to cart-->
						<button type="submit" class="search-btn"><i class='bx bx-search'></i></button>
					</div>
				</form>  *@ 
				<i class='bx bx-filter'></i> <!--Filter cart by name or price-->
			</div>
			<table>
				<thead>
					<tr>
						<th>Product</th>
						<th>Price</th>
						<th>Quantity</th>
						<th>Subtotal</th>
						<th>Remove</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var item in Model.OrderItems)
					{
						<tr>
							<td class="product-name">@item.ProductName</td>
							<td>@item.Price.ToString("C")</td>
							<td>@item.Quantity</td>
							<td>@item.Subtotal.ToString("C")</td>
							<td>
								<button onclick="removeItem('@item.ProductName')">
									<a href="#" class="btn-delete">
										<i class='bx bxs-trash'></i> <!-- Delete -->
									</a>
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		

		<div class="box-info" style="margin-top: 0px; max-width:350px;">
			<h3>Summary</h3>	
			<p>Customer: @Model.CustomerName</p>
			<h3>Total: <span id="total-amount">@Model.TotalAmount.ToString("C")</span></h3>
			<p>Payment Method: @Model.PaymentMethod</p>
			<br>

			<form asp-action="CheckoutOrder" method="post" style="display: flex;flex-direction: column;align-items: stretch;">
				<input type="hidden" name="OrderId" value="@Model.OrderId" />
				<label for="payment-amount">Payment Amount:</label>
				<input type="text" id="PaidAmount" name="PaidAmount">
				<label for="change-amount">Change:</label>
				<input type="number" id="Change" name="Change" readonly>
				<button type="submit" class="btn-checkout" style="margin-left:0;">Checkout</button>
			</form>
		</div>

	</div>
</div>
	
	<script>
		// JavaScript to update the current date
		function updateCurrentDate() {
			const now = new Date();
			const dateString = now.toLocaleString(); // Formats date and time based on user's locale
			document.getElementById('current-date').textContent = dateString;
		}

		updateCurrentDate(); // Initial call
		setInterval(updateCurrentDate, 1000); // Update every second

		// Format the input as the user types (add commas dynamically)
		document.getElementById('PaidAmount').addEventListener('input', function (e) {
			let value = e.target.value;

			// Remove invalid characters (anything except digits and a single dot)
			value = value.replace(/[^0-9.]/g, '');

			// Check if the value contains a decimal point
			const dotIndex = value.indexOf('.');
			if (dotIndex !== -1) {
				// Allow only one decimal point and keep the decimal part
				const beforeDot = value.substring(0, dotIndex);
				const afterDot = value.substring(dotIndex + 1).replace(/\./g, ''); // Remove extra dots
				value = beforeDot + '.' + afterDot;
			}

			// Split into integer and decimal parts
			const parts = value.split('.');
			let integerPart = parts[0];
			let decimalPart = parts[1] !== undefined ? '.' + parts[1].slice(0, 2) : ''; // Limit decimal places to 2

			// Add commas to the integer part
			integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

			// Combine integer and decimal parts and update the input field
			e.target.value = integerPart + decimalPart;
		});


		// Wait for the page to load
		document.addEventListener('DOMContentLoaded', function () {
				const paidAmountInput = document.getElementById('PaidAmount');
				const changeInput = document.getElementById('Change');
				const totalAmount = parseFloat('@Model.TotalAmount'); // TotalAmount from the view

			// Function to update the change when paid amount is entered
			function updateChange() {
				// Convert PaidAmount input to a decimal (float) and handle invalid inputs
				const paidAmount = parseFloat(paidAmountInput.value.replace(/[^0-9.]/g, '')) || 0; // Remove non-numeric characters except '.'
				const change = paidAmount - totalAmount;
				changeInput.value = change >= 0 ? change.toFixed(2) : '0.00';
			}

			// Add event listener to the PaidAmount input to update change dynamically
			paidAmountInput.addEventListener('input', updateChange);
		});


		


		// Sanitize input before form submission (remove commas)
		document.querySelector('form').addEventListener('submit', function () {
			let priceInput = document.getElementById('Price');
			priceInput.value = priceInput.value.replace(/,/g, ''); // Remove commas before submitting
		});


	</script>
